{"ast":null,"code":"var _jsxFileName = \"/Users/ayakosayama/Documents/Github/aws-ivs-metadata/src/components/VideoPlayer/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport Placeholder from '../Placeholder';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VideoPlayer = ({\n  playbackUrl\n}) => {\n  _s();\n\n  const videoRef = useRef(null);\n  const {\n    IVSPlayer\n  } = window;\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const {\n      ENDED,\n      PLAYING,\n      READY\n    } = IVSPlayer.PlayerState;\n\n    if (!IVSPlayer.isPlayerSupported) {\n      console.warn('The Current browser does not support the Amazon IVS player');\n      return;\n    }\n\n    const onStateChange = () => {\n      const playerState = player.current.getState();\n      console.log(`Player State - ${playerState}`);\n      setLoading(playerState !== PLAYING);\n    }; // 1. initialize ivs player\n\n\n    const player = IVSPlayer.create();\n    player.attachHTMLVideoElement(videoRef.current);\n    player.load(playbackUrl);\n    player.play(); // 2. update video state\n\n    player.current.addEventListener(READY, onStateChange);\n    player.current.addEventListener(PLAYING, onStateChange);\n    player.current.addEventListener(ENDED, onStateChange);\n    player.current.addEventListener(ERROR, onError);\n  }, [IVSPlayer, isPlayerSupported, playbackUrl]);\n\n  if (!isPlayerSupported) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"VideoPlayer\",\n    children: [/*#__PURE__*/_jsxDEV(Placeholder, {\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      id: \"video-player\",\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n\n_s(VideoPlayer, \"8VTqx00LqDQS2wOl40OI4sI0Y7E=\");\n\n_c = VideoPlayer;\nexport default VideoPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"sources":["/Users/ayakosayama/Documents/Github/aws-ivs-metadata/src/components/VideoPlayer/index.jsx"],"names":["React","useRef","useEffect","useState","Placeholder","VideoPlayer","playbackUrl","videoRef","IVSPlayer","window","loading","setLoading","ENDED","PLAYING","READY","PlayerState","isPlayerSupported","console","warn","onStateChange","playerState","player","current","getState","log","create","attachHTMLVideoElement","load","play","addEventListener","ERROR","onError"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAO,aAAP;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAAA;;AACrC,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAgBC,MAAtB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEU,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAA4BN,SAAS,CAACO,WAA5C;;AAEA,QAAG,CAACP,SAAS,CAACQ,iBAAd,EAAiC;AAC7BC,MAAAA,OAAO,CAACC,IAAR,CAAa,4DAAb;AACA;AACH;;AAED,UAAMC,aAAa,GAAG,MAAM;AACxB,YAAMC,WAAW,GAAGC,MAAM,CAACC,OAAP,CAAeC,QAAf,EAApB;AAEAN,MAAAA,OAAO,CAACO,GAAR,CAAa,kBAAiBJ,WAAY,EAA1C;AACAT,MAAAA,UAAU,CAACS,WAAW,KAAKP,OAAjB,CAAV;AACH,KALD,CARY,CAeZ;;;AACA,UAAMQ,MAAM,GAAGb,SAAS,CAACiB,MAAV,EAAf;AACAJ,IAAAA,MAAM,CAACK,sBAAP,CAA8BnB,QAAQ,CAACe,OAAvC;AACAD,IAAAA,MAAM,CAACM,IAAP,CAAYrB,WAAZ;AACAe,IAAAA,MAAM,CAACO,IAAP,GAnBY,CAqBZ;;AACAP,IAAAA,MAAM,CAACC,OAAP,CAAeO,gBAAf,CAAgCf,KAAhC,EAAuCK,aAAvC;AACAE,IAAAA,MAAM,CAACC,OAAP,CAAeO,gBAAf,CAAgChB,OAAhC,EAAyCM,aAAzC;AACAE,IAAAA,MAAM,CAACC,OAAP,CAAeO,gBAAf,CAAgCjB,KAAhC,EAAuCO,aAAvC;AACAE,IAAAA,MAAM,CAACC,OAAP,CAAeO,gBAAf,CAAgCC,KAAhC,EAAuCC,OAAvC;AACH,GA1BQ,EA0BN,CAACvB,SAAD,EAAYQ,iBAAZ,EAA+BV,WAA/B,CA1BM,CAAT;;AA6BA,MAAI,CAACU,iBAAL,EAAwB;AACpB,WAAO,IAAP;AACH;;AAEH,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEN;AAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,GAAG,EAAEH,QAAZ;AAAsB,MAAA,EAAE,EAAC,cAAzB;AAAwC,MAAA,WAAW;AAAnD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOD,CA7CD;;GAAMF,W;;KAAAA,W;AA+CN,eAAeA,WAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport Placeholder from '../Placeholder';\nimport './style.css';\n\nconst VideoPlayer = ({ playbackUrl }) => {\n    const videoRef = useRef(null)\n    const { IVSPlayer } = window;\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const { ENDED, PLAYING, READY } = IVSPlayer.PlayerState;\n\n        if(!IVSPlayer.isPlayerSupported) {\n            console.warn('The Current browser does not support the Amazon IVS player')\n            return;\n        }\n        \n        const onStateChange = () => {\n            const playerState = player.current.getState();\n    \n            console.log(`Player State - ${playerState}`);\n            setLoading(playerState !== PLAYING);\n        };\n\n        // 1. initialize ivs player\n        const player = IVSPlayer.create();\n        player.attachHTMLVideoElement(videoRef.current);\n        player.load(playbackUrl);\n        player.play();\n\n        // 2. update video state\n        player.current.addEventListener(READY, onStateChange);\n        player.current.addEventListener(PLAYING, onStateChange);\n        player.current.addEventListener(ENDED, onStateChange);\n        player.current.addEventListener(ERROR, onError);\n    }, [IVSPlayer, isPlayerSupported, playbackUrl])\n\n\n    if (!isPlayerSupported) {\n        return null;\n    }\n\n  return (\n      <div className=\"VideoPlayer\">\n          <Placeholder loading={loading} />\n          <video ref={videoRef} id=\"video-player\" playsInline></video>\n      </div>\n  );\n  \n}\n\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}